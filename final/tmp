<!DOCTYPE html>
<html lang="en">
<head>
  <div style="padding: 10px; border-bottom: 1px solid #ccc;">
  <label><strong>üë§ User ID:</strong></label>
  <input type="text" id="userIdInput" placeholder="e.g., alice123" value="guest">
  <button onclick="setUser()">Set</button>
  </div>
  <meta charset="UTF-8">
  <title>üß† Chatbot with History + Feedback</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      display: flex;
      height: 100vh;
    }
    #sidebar {
      width: 220px;
      border-right: 1px solid #ccc;
      padding: 10px;
      background: #f7f7f7;
      overflow-y: auto;
    }
    #chatPanel {
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    #chatWindow {
      flex: 1;
      padding: 15px;
      overflow-y: auto;
      background: #ffffff;
    }
    .message {
      margin: 10px 0;
    }
    .user { color: #007bff; }
    .assistant { color: #28a745; }
    .feedback { margin-top: 5px; }
    .feedback button {
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1.2em;
    }
    #chatForm {
      display: flex;
      border-top: 1px solid #ccc;
      padding: 10px;
    }
    #chatInput {
      flex: 1;
      padding: 8px;
      font-size: 1em;
    }
    button[type="submit"] {
      padding: 8px 16px;
      font-size: 1em;
    }
  </style>
</head>

<body>
  <div id="sidebar">
    <h3>üóÇ Chats</h3>
    <ul id="chatList"></ul>
  </div>

  <div id="chatPanel">
    <div id="chatWindow"></div>
    <form id="chatForm">
      <input type="text" id="chatInput" placeholder="Type a message..." autocomplete="off" />
      <button type="submit">Send</button>
    </form>
  </div>

  <script>
    let userId = "guest";  // default fallback

    function setUser() {
      userId = document.getElementById("userIdInput").value || "guest";
      chatId = null;
      clearChat();
      loadChats();
    }

    async function loadChats() {
      const res = await fetch(`/chats/${userId}`);
      const chats = await res.json();
      const list = document.getElementById("chatList");
      list.innerHTML = "";
      chats.forEach(id => {
        const li = document.createElement("li");
        li.textContent = id;
        li.style.cursor = "pointer";
        li.onclick = () => {
          chatId = id;
          clearChat();
        };
        list.appendChild(li);
      });
    }

    function clearChat() {
      document.getElementById("chatWindow").innerHTML = "";
    }

    function addMessage(role, text, originalQuery = null) {
      const div = document.createElement("div");
      div.className = `message ${role}`;
      div.innerHTML = `<strong>${role === "user" ? "üßë You" : "ü§ñ Assistant"}:</strong> ${text}`;

      if (role === "assistant" && originalQuery) {
        const fb = document.createElement("div");
        fb.className = "feedback";
        fb.innerHTML = `
          <button onclick="sendFeedback('${originalQuery}', \`${text}\`, true)">üëç</button>
          <button onclick="sendFeedback('${originalQuery}', \`${text}\`, false)">üëé</button>
        `;
        div.appendChild(fb);
      }

      document.getElementById("chatWindow").appendChild(div);
      document.getElementById("chatWindow").scrollTop = 999999;
    }

    function streamChat(message) {
      addMessage("user", message);

      const eventSource = new EventSource("/chat_stream");  // Placeholder
      let fullResponse = "";
      const payload = { user_id: userId, chat_id: chatId, query: message };

      fetch("/chat_stream", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      }).then(res => {
        const reader = res.body.getReader();
        const decoder = new TextDecoder();

        function read() {
          reader.read().then(({ done, value }) => {
            if (done) {
              addMessage("assistant", fullResponse, message);
              loadChats();
              return;
            }
            const chunk = decoder.decode(value, { stream: true });
            const lines = chunk.split("\n").filter(line => line.startsWith("data:"));
            for (const line of lines) {
              const token = line.replace("data: ", "").trim();
              if (token === "[done]") return;
              if (token === "[thinking...]") continue;
              fullResponse += token;
            }
            read();
          });
        }
        read();
      });
    }

    async function sendFeedback(query, answer, good) {
      await fetch("/feedback", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          user_id: userId,
          chat_id: chatId,
          query,
          answer,
          feedback: good
        })
      });
      alert("‚úÖ Feedback received!");
    }

    document.getElementById("chatForm").addEventListener("submit", e => {
      e.preventDefault();
      const input = document.getElementById("chatInput");
      const msg = input.value;
      input.value = "";
      streamChat(msg);
    });

    loadChats();
  </script>
</body>
</html>

